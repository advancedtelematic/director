swagger: '2.0'
info:
  contact:
    name: Advanced Telematic Systems
  version: v1
  title: Director API
  license:
    url: 'https://github.com/advancedtelematic/rvi_sota_server/blob/master/LICENSE'
    name: Mozilla Public License
tags:
  - description: |
      Administer diffs between files
    name: Diff
  - description: |
      Administer ECUs
    name: ECUs
  - description: |
      Manage devices
    name: Device
  - description: |
      Manage multi-target updates
    name: MTU
  - description: |
      Manage director repositories
    name: Repo
  - description: |
      Manage device images
    name: Images
paths:
  '/api/v1/admin/devices/{device}/ecus/{ecuSerial}/auto_update':
    get:
      tags:
        - ECUs
      summary: Lists packages on an ECU with the auto update setting enabled
      description: Lists all the packages on an ECU in a specific device that have the auto update setting enabled. Packages that are configured to auto update automatically receive updates as soon as a new version of the package is uploaded to package repository.
      produces:
        - application/json;charset=utf-8
      parameters:
        - $ref: '#/parameters/DeviceId'
        - $ref: '#/parameters/EcuSerialPath'
        - required: false
          in: header
          name: x-ats-namespace
          type: string
      responses:
        '200':
          schema:
            items:
              $ref: '#/definitions/TargetName'
            type: array
          description: ''
        '400':
          description: Invalid `x-ats-namespace`
        '404':
          description: 'Could not find the requested `deviceId` or `ecuSerial`'
    delete:
      tags:
        - ECUs
      summary: Disables the auto upate setting for all packages on an ECU
      description: Disables the auto upate setting for all packages on an ECU in a specific device. These packages no longer automatically receive updates as soon as a new version of the package is uploaded to package repository. You must manually update them instead.
      produces:
        - application/json;charset=utf-8
      parameters:
        - $ref: '#/parameters/DeviceId'
        - $ref: '#/parameters/EcuSerialPath'
        - required: false
          in: header
          name: x-ats-namespace
          type: string
      responses:
        '200':
          description: '' # MC What do you get back? A list of devices affected?
        '400':
          description: Invalid `x-ats-namespace`
        '404':
          description: 'Could not find the specified `device` or `ecuSerial`.'
  '/api/v1/admin/devices/{device}/ecus/{ecuSerial}/auto_update/{targetName}':
    put:
      tags:
        - ECUs
      summary: Enables the auto update setting for a package
      description: Enables the auto update setting for a package on a specific ECU in a specific device. Once the auto update setting is enabled, the package is automatically updated as soon as a new package version is uploaded to package repository.
      produces:
        - application/json;charset=utf-8
      parameters:
        - $ref: '#/parameters/DeviceId'
        - $ref: '#/parameters/EcuSerialPath'
        - $ref: '#/parameters/TargetNamePath'
        - required: false
          in: header
          name: x-ats-namespace
          type: string
      responses:
        '200':
          description: '' # MC What does the response look like?
        '400':
          description: Invalid `x-ats-namespace`
        '404':
          description: 'Could not find the `device`, `ecuSerial` or `targetName`'
    delete:
      tags:
        - ECUs
      summary: Disables the auto update setting for a package
      description: Disables the auto update setting for a package on a specific ECU in a specific device. After the auto update setting is disabled, you must manually install newer versions of the package.
      produces:
        - application/json;charset=utf-8
      parameters:
        - $ref: '#/parameters/DeviceId'
        - $ref: '#/parameters/EcuSerialPath'
        - $ref: '#/parameters/TargetNamePath'
      responses:
        '200':
          description: ''
        '400':
          description: Invalid `x-ats-namespace`
        '404':
          description: 'Could not find the specified `device` or `ecuSerial` or `targetName`.'
  '/api/v1/admin/devices/{device}': # export
    get:
      tags:
        - Device
      summary: Fetches ECU information about a device
      description: Fetches information about the ECUs that were registered on the specified device. The ECU information includes the hardware ID of each ECU and the software that is installed on it.
      produces:
        - application/json;charset=utf-8
      parameters:
        - $ref: '#/parameters/DeviceId'
        - required: false
          in: header
          name: x-ats-namespace
          type: string
      responses:
        '200':
          schema:
            items:
              $ref: '#/definitions/EcuInformation'
            type: array
          description: 'A list of entries for each ECU in the device'
        '400':
          description: Invalid `x-ats-namespace`
        '404':
          $ref: '#/responses/DeviceNotFound'
  '/api/v1/admin/devices/{device}/queue':
    get:
      tags:
        - Device
      summary: Lists the updates that are queued for a single device
      description: Fetches a list of all the updates that are scheduled to be installed on the device. Updates are queued when the device has gone offline or is busy installing the latest update in the queue.
      produces:
        - application/json;charset=utf-8
      parameters:
        - $ref: '#/parameters/DeviceId'
        - required: false
          in: header
          name: x-ats-namespace
          type: string
      responses:
        '200':
          schema:
            items:
              $ref: '#/definitions/QueueResponse'
            type: array
          description: Successful - update definitions were successfully retrieved.
        '400':
          description: Invalid `x-ats-namespace`
        '404':
          $ref: '#/responses/DeviceNotFound'
  '/api/v1/admin/devices/{device}/multi_target_update/{update}': # export
    put:
      tags:
        - MTU
      summary: Schedules a multi-target update for a single device
      description: This operation reads the definition of a multi-target update and schedules the update operation for the specified device. When the the specified device comes online, the updated software files are pushed to the device. 
      produces:
        - application/json;charset=utf-8
      parameters:
        - $ref: '#/parameters/DeviceId'
        - required: true
          in: path
          name: update
          type: string
          description: The ID of the multi-target update to be scheduled.
        - required: false
          in: header
          name: x-ats-namespace
          type: string
      responses:
        '200':
          description: 'Empty response on success'
        '400':
          description: Invalid `x-ats-namespace`
        '404':
          description: 'Could not find the specified `device` or `update`.'
        '412':
          description: Could not schedule the update on the device or could not find the update ID.
  '/api/v1/multi_target_updates/{update}':
    get:  # MC ADDED
      tags:
        - MTU
      summary: Lists the targets in a multi-target update # MC: Pending, completed, or both?
      description: Lists the targets in a multi-target update.
      produces:
        - application/json;charset=utf-8
      parameters:
        - $ref: '#/parameters/UpdateId'
      responses:  # MC TODO
        '200':
          description: '' # multi-targetUpdateRequest
        '400':
          description: Invalid `x-ats-namespace`
        '404':
          description: 'Could not find the specified `device` or `update`.'
  /api/v1/admin/devices/queue/cancel:
    put:
      tags:
        - MTU
      summary: Cancels multi-target updates for a list of devices
      description: Cancels multi-target updates for a list of devices
      consumes:
        - application/json;charset=utf-8
      produces:
        - application/json;charset=utf-8
      parameters:
        - required: true
          schema:
            items:
              $ref: '#/definitions/Uuid'
            type: array
          in: body
          name: filepaths
          description: Devices uuids to cancel update for
        - required: false
          in: header
          name: x-ats-namespace
          type: string
      responses:
        '200':
          description: ''
        '400':
          description: Invalid `x-ats-namespace` or `body`
  /api/v1/admin/repo:
    post: # export
      tags:
        - Repo
      summary: Creates a director repository
      description: Creates a director repository which controls what updates should be installed on devices.
      produces:
        - application/json;charset=utf-8
      parameters:
        - required: false
          in: header
          name: x-ats-namespace
          type: string
      responses:
        '201':
          schema:
            $ref: '#/definitions/RepoId'
          description: The ID of the new repository.
          examples:
            application/json;charset=utf-8:
              "581e6318-3a59-4856-b389-c14324c2a6dc"
        '400':
          description: Invalid `x-ats-namespace`
    get: # MC ADDED
      tags:
        - Repo
      summary: Fetches the most current root.json file
      description: Fetches the most current root.json file.
      produces:
        - application/json;charset=utf-8
      responses: # MC TODO
        '200':
          description: 'Could not find the root.json file.'
        '400':
          description: Invalid `x-ats-namespace`
  /api/v1/admin/repo/{version}.root.json:
    get: # MC ADDED
      tags:
        - Repo
      summary: Fetches a specific version of the root.json file
      description: Fetches a specific version of the root.json file
      parameters:
        - required: true
          in: path
          name: version
          type: integer
          description: The required verson of the root.json file.
      produces:
        - application/json;charset=utf-8
      responses:
        '200':
          schema:
            type: string
          description: 'A list of devices.' # MC TODO: Improve descr
        '400':
          description: Invalid `x-ats-namespace` or `limit` or `offset`
        '404':
          description: No devices found
  '/api/v1/device/{device}/targets.json': # export
    get:
      tags:
        - Device
      summary: Fetches metadata for all targets on a specific device
      description: Fetches metadata about software that is targeted for updates on a specified device. This metadata covers software that is installed on all ECUs within the device. These files can be individual software packages or entire filesystem images.
      produces:
        - application/json;charset=utf-8
      parameters:
        - $ref: '#/parameters/DeviceId'
        - required: false
          in: header
          name: x-ats-namespace
          type: string
      responses:
        '200':
          schema:
            $ref: '#/definitions/SignedTargetPayload'
          description: 'Target metadata'
          examples:
            'application/json;charset=utf-8':
              {"signatures" : [{"keyid" : "6a809c62b4f6c2ae11abfb260a6a9a57d205fc2887ab9c83bd6be0790293e187","method" : "rsassa-pss-sha256","sig" : "bUL4Ywa0NKfmpCoOTpgLHkjXDFD13gdA4/jxdxR3pB/eI0KRNsWv1xGdFIGD+EjN5TxpVmb7JRLGvsP9v+86BFqM6VSY5Ngn5vfPC5gHDFJHAxmAtXqlyTzeKSFStZ/C9sx4XeaFtfUc8mmUzykeKuUCwPqVbKCedLCgUUPGvFQJ2iO95Tys9/6sQWp4CZQhPtudXzUgjU5hS+E3nTaCaa4mIZruxjwu8WnelxTFNwA2D+0RH7thtpOZWHEviU+9vumvVhXpHOCESZDwJ9CqzE7DaWTkSZijutNSKnbVvaPaCbaPxm59V0QLMXwsq38wi0yJIgFgRDuuv5sJ4oM7cA=="}],"signed" : {"_type" : "Targets","expires" : "2015-04-20T14:46:50Z","targets" : {"agl-ota-qemux86-64-a0fb2e119cf812f1aa9e993d01f5f07cb41679096cb4492f1265bff5ac901d0d" : {"custom" : {"ecuIdentifier" : "CA:FE:A6:D2:84:9D","uri" : "https://treehub.atsgarage.com/api/v2/mydevice"},"hashes" : {"sha256" : "a0fb2e119cf812f1aa9e993d01f5f07cb41679096cb4492f1265bff5ac901d0d"},"length" : 0},"secondary_firmware.lib" : {"custom" : {"ecuIdentifier" : "ca:fe:01:3e:72:16"},"hashes" : {"sha256" : "1bbb15aa921ffffd5079567d630f43298dbe5e7cbc1b14e0ccdd6718fde28e47"},"length" : 15}},"version" : 1}}
        '400':
          description: Invalid `x-ats-namespace`
        '404':
          description: 'Could not find the specified `device`.'
          examples:
            text/plain:
              The requested resource could not be found.
  '/api/v1/device/{device}/ecus':
    post:
      tags:
        - ECUs
      summary: Registers ECUs on a device
      description: Registers ECUs on a specific device so that the ECUs can receive software updates. You must define a at least a primary ECU . Secondary ECUs are optional.
      consumes:
        - application/json;charset=utf-8
      produces:
        - application/json;charset=utf-8
      parameters:
        - $ref: '#/parameters/DeviceId'
        - required: true
          schema:
            $ref: '#/definitions/DeviceEcuRegistration'
          in: body
          name: body
          description: A JSON object that contains the details of the ECUs to be registered.
        - required: false
          in: header
          name: x-ats-namespace
          type: string
      responses:
        '200':
          description: 'ECUS successfully registered' # MC: What does the response really look like?
        '400':
          description: Invalid `x-ats-namespace` or `body`
        '404':
          description: 'Could not find the specific`device`'
  '/api/v1/device/{device}/manifest':
    put:
      tags:
        - Device
      summary: Sets the device manifest
      description: Sets the device manifest
      consumes:
        - application/json;charset=utf-8
      produces:
        - application/json;charset=utf-8
      parameters:
        - $ref: '#/parameters/DeviceId'
        - required: true
          schema:
            $ref: '#/definitions/SignedManifestPayload'
          in: body
          name: body
          description: The device manifest
        - required: false
          in: header
          name: x-ats-namespace
          type: string
      responses:
        '200':
          description: ''
        '400':
          description: Invalid `x-ats-namespace` or `body`
        '404':
          description: 'Could not find the specified `device`.'
  '/api/v1/device/{device}/images':
    get:
      tags:
        - Images
      summary: Lists the images that are installed on the device
      description: Lists the images that are installed on the device.
      produces:
        - application/json;charset=utf-8
      parameters:
        - $ref: '#/parameters/DeviceId'
        - required: false
          in: header
          name: x-ats-namespace
          type: string
      responses: # TODO
        '200':
          description: 'A list of filesystem images.'
        '400':
          description: Invalid `x-ats-namespace`.
        '404':
          description: 'Could not find the specified `device`.'
  '/api/v1/device/{device}/targets':
    put: # MC ADDED
      tags:
        - MTU
      summary: Sets the target files for a multi-target update.
      description: Sets the target files for a multi-target update.
      consumes:
        - application/json;charset=utf-8
      produces:
        - application/json;charset=utf-8
      parameters:
        - $ref: '#/parameters/DeviceId'
        - required: true
          schema:
            $ref: '#/definitions/TufTarget'
          in: body
          name: body
          description: The target files for the update.
        - required: false
          in: header
          name: x-ats-namespace
          type: string
      responses:
        '200':
          description: ''
        '400':
          description: Invalid `x-ats-namespace` or `body`
        '404':
          description: 'Could not find the specified `device`.'
  /api/v1/multi_target_updates: # export
    post:
      tags:
        - MTU
      summary: Creates a multi-target update
      description: Creates a list of update operations, one per hardware id. Each entry specifies information about the targeted software such the package or image file. Entries also contain information about the current file version and version information for the updated file. To push the update to a device, you must schedule it with a PUT operation.
      # MC: Check above for accuracy. 
      # MC: Also wondering....what does the "set targets" operation do in comparison to this one? Does it allow you to edit the target files for an existing update? 
      consumes:
        - application/json;charset=utf-8
      produces:
        - application/json;charset=utf-8
      parameters:
        - required: true
          schema:
            $ref: '#/definitions/multitargetUpdateRequest'
          in: body
          name: body
          description: A definition of the update operations for the multi-target update.
        - required: false
          in: header
          name: x-ats-namespace
          type: string
      responses:
        '200':
          schema:
            $ref: '#/definitions/multitargetUpdateRef'
          description: 'The ID of the new multi-target update'
          examples:
            application/json;charset=utf-8:
              "581e6318-3a59-4856-b389-c14324c2a6dc"
        '400':
          description: Invalid `x-ats-namespace` or `body`
          examples:
            text/plain:
              Request entity expected but not supplied
  /api/v1/admin/images/installed_count:
    post: # MC ADDED
      tags:
       - Images
      summary: Fetches the number of installed images
      description: Fetches the number of installed images.
      parameters:
        - required: true
          schema:
            $ref: '#/definitions/DevicePath' # MC added this definition
          in: body
          name: body
          description: The paths to the images.
      responses: # MC TODO Fix responses
        '204':
          description: Could not find any images.
        '400':
          description: Images found.
  /api/v1/admin/images/installed_count/affected: # Not sure what "affected" means here
    get: # MC ADDED
      tags:
        - Images
      summary: Lists all devices that have a specific image installed
      description: Lists all devices that have a specific image installed.
      produces:
        - application/json;charset=utf-8
      parameters:
        - $ref: '#/parameters/Limit'
        - $ref: '#/parameters/Offset'
        - required: true
          in: query
          name: image
          type: string
          description: The name of the image.  # MC TODO clarify terminology - it's referred to else where as the image's "path"
      responses:  # MC TODO Fix responses
        '204':
          description: Could not find any images.
        '400':
          description: Images found.
  /api/v1/admin/devices:
    post: # MC ADDED
      tags:
        - Device
      summary: Registers a device
      description: Registers a device
      parameters:
        - required: true
          schema:
            $ref: '#/definitions/RegisterDevice'  # MC added this definition
          in: body
          name: body
          description: The paths to the images.
      responses:  # MC TODO Fix responses
        '204':
          description: Could not find any images.
        '400':
          description: Images found.
    get: # MC ADDED
      tags:
        - Device
      summary: Lists all the devices
      description: Lists all registered and unregistered devices.
      # QUESTION:  Device Registry has a similar  endpoint, what exactly is the difference with this one?
        # from CODE:  AdminResource.scala >  val route > findDevices

      # QUESTION:  Why does this exist when DeviceRegistry also has "find Device" endpoints?
      # QUESTION:  Doesn't seem to need any parameters (apart from offset and limit) and I get "no resource found" when I try out the endpoint - is it still valid?
      produces:
        - application/json;charset=utf-8
      responses:
        '200':
          schema:
            type: string
          description: 'A list of devices.' # MC TODO: Improve descr
        '400':
          description: Invalid `x-ats-namespace` or `limit` or `offset`
        '404':
          description: 'No devices found'
  /api/v1/admin/devices/{device}/ecus/public_key:
    get: # MC ADDED (Request sent when you click on the "key icon" next to theprimary ECU in the GUI)
      tags:
        - ECUs
      summary: Fetches the public key for an ECU
      description: Fetches the public key for an ECU
      parameters:
        - $ref: '#/parameters/DeviceId'
        - $ref: '#/parameters/EcuSerialQuery'
      produces:
        - application/json;charset=utf-8
      responses: # MC TODO: Improve descr
        '200':
          schema:
            $ref: '#/definitions/TufKey'
          description: 'A public key for the ECU. This key is used for offline image signing.' # MC What is this for?
        '404':
         description: 'Could not find the requested `device` or `EcuSerial`.'
  /api/v1/admin/devices/hardware_identifiers:
    get: # MC ADDED
      tags:
        - ECUs
      summary: Lists the hardware IDs for all ECUs
      description: Lists the hardware IDs for all ECUs on all devices. Hardware IDs are different from serial numbers in that they are not unique. The same type of ECU has the same hardware ID multiple devices. # MC Needs a fact check
      parameters:
        - $ref: '#/parameters/Offset'
        - $ref: '#/parameters/Limit'
      produces:
        - application/json;charset=utf-8
      responses:
        '200':
          description: TODO
          schema:
            $ref: '#/definitions/EcuHardwareId' # MC: Needs updating to be object / Confusion over what hardware ID is.
        '404':
          description: TODO
          schema:
            $ref: '#/responses/DeviceNotFound' # MC: 404 can't be "device not found"? Does it mean "No ECUS?"
  # TODO: add /api/v1/device/{device}/{root.json,snapshot.json,timestamp.json}
  /api/v1/device/{device}/{version}.root.json:
      get: # MC ADDED
        tags:
          - Device
        summary: Fetches the root metadata file for a specific device
        description: Fetches the root metadata file for a specific device. The root metadata file defines the roles that can sign other types of metadata such as target packages and timestamps.
        #MC Not sure what this endppoint is doing. Why is the version of the root file a parameter? How do I know what to select? What kind of workflow does this operation fit into.
        parameters:
          - $ref: "#/parameters/DeviceId"
          - $ref: "#/parameters/Version" # MC No idea how this is supposed to look for root.json.
        produces:
          - application/json;charset=utf-8
        responses:
          '200':
            description: 'Undefined' # MC TODO: Improve descr, can't get valid response yet.
          '404':
            $ref: '#/responses/DeviceECUNotFound'
  /api/v1/diffs/bs_diff/: # createDiff > CreateDiffInfoRequest
      post:
        tags:
          - Diff
        summary: Creates a diff information request
        description: Creates a information diff request
        consumes:
          - application/json;charset=utf-8
        produces:
          - application/json;charset=utf-8
        parameters:
          - required: true
            in: body
            name: body
            schema:
              $ref: '#/definitions/DiffInfoRequest'
          - required: false
            in: header
            name: x-ats-namespace
            type: string
        responses: # MC TODO
          '200':
            schema:
              $ref: '#/definitions/RepoId'
            description: ''
          '400':
            description: Invalid `x-ats-namespace`
  /api/v1/diffs/bs_diff/bs_diff/: # MC asumming bsDiffQuery happens over query params
      get:
        tags:
          - Diff
        summary: Fetches the results of a diff
        description: Fetches the results of a bsdiff between two files.
        produces:
          - application/json;charset=utf-8
        parameters: # {bsDiffQuery}
          - required: true
            in: query
            name: BSDiff from
            description: The BSDiff from file. A sha256 format such as "1a94f265a56eb768d714f5a73b82c988a11d453bcec3f985502b48296d4d217d".
            type: string
          - required: true
            in: query
            name: BSDiff to
            description: The BSDiff to commit.  A sha256 format such as "1a94f265a56eb768d714f5a73b82c988a11d453bcec3f985502b48296d4d217d".
            type: string
          - required: false
            in: header
            name: x-ats-namespace
            type: string
        responses: # MC TODO
          '200':
            schema:
              $ref: '#/definitions/RepoId'
            description: ''
          '400':
            description: Invalid `x-ats-namespace`
  /api/v1/diffs/bs_diff/static_delta/: # MC asumming StaticDeltaQuery happens over query params
      get:
        tags:
          - Diff
        summary: Fetches the result of a static delta
        description: Fetches the result of a static delta.
        produces:
          - application/json;charset=utf-8
        parameters: # {StaticDeltaQuery}
          - required: true
            in: query
            name: Static Delta From
            description: The Static Delta from commit.  A sha256 format such as "1a94f265a56eb768d714f5a73b82c988a11d453bcec3f985502b48296d4d217d".
            type: string
          - required: true
            in: query
            name: Static Delta To
            description: The Static Delta to commit.  A sha256 format such as "1a94f265a56eb768d714f5a73b82c988a11d453bcec3f985502b48296d4d217d".
            type: string
          - required: false
            in: header
            name: x-ats-namespace
            type: string
        responses: # MC TODO
          '200':
            schema:
              $ref: '#/definitions/RepoId'
            description: ''
          '400':
            description: Invalid `x-ats-namespace`
definitions:
  DiffInfoRequest:
    required:
      - format
      - from
      - to
    properties:
      format:
        $ref: "#/definitions/TargetFormat"
      from:
         $ref: '#/definitions/TufTarget'
      to:
         $ref: '#/definitions/TufTarget'
    type: object
  TargetName:
    type: string
    description: The name of the software package that is targeted for an update.
    example: rpi-demo-img-aktualizr-c24f1fc9b6
  EcuInformation:
    required:
      - id
      - hardwareId
      - primary
      - image
    properties:
      id:
        $ref: '#/definitions/EcuSerial'
      hardwareId:
        $ref: '#/definitions/EcuHardwareId'
      primary:
        type: boolean
        description: A flag that indicates whether the ECU is the primary ECU. If `false`, the ECU is treated as a secondary ECU.
      image:
        $ref: '#/definitions/EcuInfoImage'
    type: object
  EcuSerial:
    type: string
    description: A serial number which is the unique identifier for the ECU.
    example: c226c6d1a1a1286f559eb2a5d7b7dae87e5ca5abda1ae3f7dd4030a29a89cda0
  DevicePath:
    required:
        - filepaths
    properties:
      filepaths:
        type: string
        example:
        - rpi-demo-img-akzr-c5b8ae509d7da4f92cca43bc9ec48a3a311fc5a0f2eaa997ac4c6b147a173b67
        - rpi-demo-img-7adb6b96bec5c422916457d2179a2eec20e0530a1860f2faaebf7ac8a6560386
        description: The path to a device. The name plus version number.
  EcuHardwareId:
    type: string
    description: The hardware ID of a specific ECU.
    example: raspberrypi3
  EcuInfoImage:
    required:
      - filepath
      - size
      - hash
    properties:
      filepath:
        type: string
        description: A path to the image file.
        example: rpi-demo-img-aktualizr-rocko-2505305e229894bfc0e2a3762c90fc714e6159c43c9f68ab7ecc35ee87a0b8af
      size:
        type: integer
        description: The size image file in bytes.
      hash:
        $ref: '#/definitions/Hash'
    type: object
  Hash:
    required:
      - sha256
    properties:
      sha256:
        type: string
        description: A sha256 checksum of the image data.
        example: 2505305e229894bfc0e2a3762c90fc714e6159c43c9f68ab7ecc35ee87a0b8af
    type: object
  QueueResponse:
    required:
      - targets
      - inFlight
    properties:
      updateId:
        $ref: '#/definitions/multitargetUpdateRef'
      targets:
        additionalProperties:
          $ref: '#/definitions/CustomImage'
        type: object
      inFlight:
        type: boolean
    type: object
  multitargetUpdateRef:
    description: A unique identifier for the multi-target update definition.
    example: '581e6318-3a59-4856-b389-c14324c2a6dc'
    type: string
  CustomImage:
    required:
      - image
    properties:
      image:
        $ref: '#/definitions/Image'
    type: object
  Image:
    required:
      - filepath
      - fileinfo
    properties:
      filepath:
        $ref: '#/definitions/TargetFilename'
      fileinfo:
        $ref: '#/definitions/FileInfo'
    type: object
  TargetFilename:
    example: "autosr.adapt.lib"
    description: The name of the file targeted by the update operation.
    type: string
  FileInfo:
    required:
      - hashes
      - length
    properties:
      hashes:
        $ref: '#/definitions/Hash'
      length:
        type: integer
    type: object
  Uuid:
    type: string
  RepoId:
    type: string
  SignedTargetPayload:
    required:
      - signatures
      - signed
    properties:
      signatures:
        items:
          $ref: '#/definitions/ClientSignature'
        type: array
      signed:
        $ref: '#/definitions/TargetRole'
  SignedManifestPayload:
    required:
      - signatures
      - signed
    properties:
      signatures:
        items:
          $ref: '#/definitions/ClientSignature'
        type: array
      signed:
        $ref: '#/definitions/DeviceManifest'
    type: object
  ClientSignature:
    required:
      - keyid
      - method
      - sig
    properties:
      keyid:
        $ref: '#/definitions/KeyId'
      method:
        $ref: '#/definitions/SignatureMethod'
      sig:
        $ref: '#/definitions/Signature'
    type: object
  KeyId:
    type: string
    description: Hex string with a total length of 64.
    example: 6a809c62b4f6c2ae11abfb260a6a9a57d205fc2887ab9c83bd6be0790293e187
  SignatureMethod:
    description: The type of signature that is used to sign the metadata.
    type: string
    enum:
      - rsassa-pss-sha256
      - ed25519
      - ecPrime256v1
  Signature:
    type: string
    description: A base64-encoded signature where the signature type is defined by the `SignatureMethod` property.
    example: bUL4Ywa0NKfmpCoOTpgLHkjXDFD13gdA4/jxdxR3pB/eI0KRNsWv1xGdFIGD+EjN5TxpVmb7JRLGvsP9v+86BFqM6VSY5Ngn5vfPC5gHDFJHAxmAtXqlyTzeKSFStZ/C9sx4XeaFtfUc8mmUzykeKuUCwPqVbKCedLCgUUPGvFQJ2iO95Tys9/6sQWp4CZQhPtudXzUgjU5hS+E3nTaCaa4mIZruxjwu8WnelxTFNwA2D+0RH7thtpOZWHEviU+9vumvVhXpHOCESZDwJ9CqzE7DaWTkSZijutNSKnbVvaPaCbaPxm59V0QLMXwsq38wi0yJIgFgRDuuv5sJ4oM7cA==
  TargetRole:
    description: Information about the TUF role that signed the metadata for the selected targets.
    required:
      - expires
      - targets
      - version
    properties:
      expires:
        $ref: '#/definitions/UTCTime'
      targets:
        additionalProperties:
          $ref: '#/definitions/ClientTargetItem'
        type: object
      version:
        maximum: 9223372036854776000
        minimum: 1
        type: integer
        description: TUF role version.
    type: object
  UTCTime:
    example: '2016-07-22T00:00:00Z'
    format: 'yyyy-mm-ddThh:MM:ssZ'
    type: string
  ClientTargetItem:
    required:
      - hashes
      - length
    properties:
      hashes:
        $ref: '#/definitions/Hash'
      length:
        type: integer
      custom:
        $ref: '#/definitions/TargetCustom'
    type: object
  TargetCustom:
    required:
      - ecuIdentifier
      - hardwareId
      - uri
    properties:
      ecuIdentifier:
        $ref: '#/definitions/EcuSerial'
      hardwareId:
        $ref: '#/definitions/EcuHardwareId'
      uri:
        example: 'https://treehub.atsgarage.com/api/v2/mydevice'
        type: string
    type: object
  DeviceEcuRegistration:
    required:
      - primary_ecu_serial
      - ecus
    properties:
      primary_ecu_serial:
        $ref: '#/definitions/EcuSerial'
      ecus:
        items:
          $ref: '#/definitions/RegisterEcu'
        type: array
    type: object
  RegisterEcu:
    required:
      - _registerEcuEcuSerial
      - _registerEcuHardwareIdentifier
      - _registerEcuClientKey
    properties:
      _registerEcuEcuSerial:
        $ref: '#/definitions/EcuSerial'
      _registerEcuHardwareIdentifier:
        $ref: '#/definitions/EcuHardwareId'
      _registerEcuClientKey:
        $ref: '#/definitions/TufKey'
    type: object
  TufKey:
    required:
      - keyval
      - keytype
    properties:
      keyval:
        $ref: '#/definitions/TufKeyval'
      keytype:
        $ref: '#/definitions/TufKeytype'
    type: object
    description: 'A public key for an ECU. This key is used for offline image signing.'
  TufKeyval:
    description: 'The value of the public key for an ECU'
    required:
      - public
    properties:
      public:
        type: string
        example: | # MC validated that the response returns this.
              -----BEGIN PUBLIC KEY-----
              MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvhb030U1dOLaJgj01A5v
              enxkkzozGL+G/D597/pR+8iII90quYGkUKWV+Gl8x66XSDtAhLTsRGFhf1yY6X6Z
              o9WT3JQ5nw71WO9eALhZKXZPIDcAMEqIlRUdwzR+RvdvRCjgYKRPHA29rhsbc5/l
              4bryal5ofdQpaRKOK7CYOj9g2LAFc94bqiSCwMV1zL3b4En1avPlpxPplzdCQjH4
              2yJCGhzm9x173KbmRGCUBfCMsacCz2C/PZYWexocSdeU3l2AFjQyJBaHhtrs7aur
              aGddLAnTrDDRJBK5lZR0ofGrZu47wjYL1E/eSQUf5Eux0z/KgpZmLFuH2Zcmvbow
              1wIDAQAB
              -----END PUBLIC KEY-----
    type: object
  TufKeytype:
    type: string
    description: 'The type of public key. The default is RSA.'
    enum:
      - RSA
      - ED25519
  DeviceManifest:
    required:
      - primary_ecu_serial
      - ecu_version_manifests
    properties:
      primary_ecu_serial:
        $ref: '#/definitions/EcuSerial'
      ecu_version_manifests:
        additionalProperties:
          $ref: '#/definitions/EcuManifest'
        type: object
    type: object
    description: Targets currently installed on the device.
  EcuManifest:
    required:
      - timeserver_time
      - installed_image
      - previous_timeserver_time
      - ecu_serial
    properties:
      timeserver_time:
        $ref: '#/definitions/UTCTime'
      installed_image:
        $ref: '#/definitions/Image'
      previous_timeserver_time:
        $ref: '#/definitions/UTCTime'
      ecu_serial:
        $ref: '#/definitions/EcuSerial'
      attacks_detected:
        type: string
        description: A message about a detected security attack, if any.
      custom:
        $ref: '#/definitions/CustomManifest'
  CustomManifest:
    required:
      - operation_result
    properties:
      operation_result:
        $ref: '#/definitions/OperationResult'
  OperationResult:
    properties:
      id:
        type: string
        example: 2021ef23-3be2-434a-9ed5-b3bdaf165a02
      result_code:
        type: integer
        description: 0 and 1 mean success, other values represent errors.
        example: 19
      result_text:
        type: string
        description: The textual description of the error.
        example: Installation error.
  multitargetUpdateRequest:
    required:
      - targets
    properties:
      targets:
        additionalProperties:
          $ref: '#/definitions/TufTargetRequest'
        type: object
    type: object
    description: The definition of the multi-target update operation to create.
                 Contains a map from hardware identifiers to the request for the corresponding hardware.
  TufTargetRequest:
    required:
      - to
      - targetFormat
      - generateDiff
    properties:
      from:
        $ref: '#/definitions/TufTarget'
      to:
        $ref: '#/definitions/TufTarget'
      targetFormat:
        $ref: '#/definitions/TargetFormat'
      generateDiff:
        type: boolean
        description: Determines whether the server should perform a smaller relative update.
    type: object
    description: The definition of a single update operation. The definition is comprised of the original target file (from) and the replacement target file (to).
  TufTarget:
    required:
      - target
      - targetLength
      - checksum
    properties:
      target:
        $ref: '#/definitions/TargetFilename'
      targetLength:
        type: integer
        description: Length of the update target in bytes.
        example: 23424
      checksum:
        $ref: '#/definitions/Checksum'
    type: object
    description: A target for file updates. Can be either the original file or the replacement file.
  Checksum:
    required:
      - method
      - hash
    properties:
      method:
        type: string
        enum:
          - sha256
      hash:
        type: string
        description: Checksum value of the target as a hex string.
        example: a803fb3cef3f5639daaa9780fc719db106f2040ebfe473de6710c7900bba703c
    type: object
    description: Checksum object of the target binary.
    example: {"method":"sha256","hash":"a803fb3cef3f5639daaa9780fc719db106f2040ebfe473de6710c7900bba703c"}
  TargetFormat:
    type: string
    enum:
      - OSTREE
      - BINARY
    description: The target type is either a binary image or an OSTree commit.
  RegisterDevice:
    required:
      - _registerDeviceVin
      - _registerDevicePrimaryEcuSerial
      - _registerDeviceEcus
    properties:
      vin:
        $ref: '#/definitions/DeviceId'
      primary_ecu_serial:
        $ref: '#/definitions/EcuSerial'
      ecus:
        type: array
        items:
            $ref: '#/definitions/RegisterEcu'
  DeviceId:
     type: string
     description: A unique identifier for the device.
parameters:
  DeviceId:
    type: string
    required: true
    name: device
    in: path
    description: |
        The unique identifier of the device to select. For example, ```74fc21fb-0923-4ec2-a54c-5357d1d16a76```.
  EcuSerialPath:
    type: string
    required: true
    name: ecuSerial
    in: path
    description: |
        The serial number of the ECU to select. For example, ```0000000026267d8a```.
  EcuSerialQuery:
    type: string
    required: true
    name: ECU Serial number
    in: query
    description: A unique identifier for the ECU.
  UpdateId:
    type: string
    required: true
    name: update
    in: path
    description: A unique identifier for an update request.
  Offset:
    type: integer
    required: true
    name: Offset
    in: query
    description: Equivalent of the page number when paginating though items in a list.
  Limit:
    type: integer
    required: true
    name: Limit
    in: query
    description: The maximum number of items to fetch from a list.
  Version:
    type: integer
    required: true
    name: version
    in: path
    description: The version number of the root.json file to fetch.
  TargetRoleType:
    in: path
    type: string
    required: true
    name: Role
    description: The type of role to use when fetching the root.json file.
    enum:
      - ROOT
      - TARGETS
      - SNAPSHOT
      - TIMESTAMP
  TargetName:
    in: query
    required: true
    name: targetNameQuery
    type: string
    description: The name of the software package that is targeted for an update. For example, ```rpi-demo-img-aktualizr-c24f1fc9b6```.
  TargetNamePath:
    in: path
    required: true
    name: targetName
    type: string
    description: The name of the software package that is targeted for an update. For example, ```rpi-demo-img-aktualizr-c24f1fc9b6```.
responses:
  DeviceNotFound:
    description: Could not find the specified device.
    examples:
      'application/json':
        {"code":"missing_device","description":"The device was not found","cause":null,"errorId":"185e2c61-d312-4bb6-acaa-ce3c0cc9f240"}

  DeviceECUNotFound:
    description: Could not find the specified device or ECU.
  DeviceECUTargetNotFound:
    description: Could not find the specified device, ECU, or target package.
