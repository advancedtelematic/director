envPrefix=""
envPrefix=${?ENV_PREFIX}

serviceName=director
serviceName=${?SERVICE_NAME}

instanceId=${envPrefix}${serviceName}
instanceId=${?MESOS_TASK_ID}

ats {
  metricsReporter {
    serviceName = ${serviceName}
    instanceId = ${instanceId}
  }
}

akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
  loglevel = ${?AKKA_LOGLEVEL}
  log-config-on-start = off
  log-config-on-start = ${?AKKA_LOG_CONFIG_ON_START}

  http {
    server {
      idle-timeout = 80 s
      idle-timeout = ${?AKKA_HTTP_IDLE_TIMEOUT}
      max-connections = 2048
      max-connections = ${?AKKA_HTTP_MAX_CONNECTIONS}
      backlog = 10000
      backlog = ${?AKKA_HTTP_BACKLOG}
    }

    host-connection-pool {
      # The maximum number of parallel connections that a connection pool to a
      # single host endpoint is allowed to establish. Must be greater than zero.
      max-connections = 2048
      max-connections = ${?AKKA_HTTP_CLIENT_MAX_CONNECTIONS}
      # The maximum number of open requests accepted into the pool across all
      # materializations of any of its client flows.
      # Protects against (accidentally) overloading a single pool with too many client flow materializations.
      # Note that with N concurrent materializations the max number of open request in the pool
      # will never exceed N * max-connections * pipelining-limit.
      # Must be a power of 2 and > 0!
      max-open-requests = 4096
      max-open-requests = ${?AKKA_HTTP_CLIENT_MAX_OPEN_REQUESTS}
    }
  }
}

daemon {
  # "UserCreated" listener only starts when a value is given here
  # example: defaultKeyType = "com.advancedtelematic.libtuf.data.TufDataType.RsaKeyType"
  defaultKeyType = ${?DEFAULT_KEY_TYPE}
}

database = {
  driver = "org.mariadb.jdbc.Driver"
  url = "jdbc:mariadb://localhost:3306/director"
  url = ${?DB_URL}
  properties {
    user = "director"
    user = ${?DB_USER}
    password = "director"
    password = ${?DB_PASSWORD}
    rewriteBatchedStatements=true
  }
  numThreads = 20
  numThreads = ${?DB_NUM_THREADS}
  queueSize = 1000
  queueSize = ${?DB_QUEUE_SIZE}
  migrate = false
  migrate = ${?DB_MIGRATE}
  registerMbeans = true
}

keyserver = {
  host = "localhost"
  host = ${?TUF_KEYSERVER_HOST}
  port = 80
  port = ${?TUF_KEYSERVER_PORT}
  uri = "http://"${keyserver.host}":"${keyserver.port}
}

tuf.binary = {
  scheme = "http"
  scheme = ${?TUF_REPOSERVER_SCHEME}
  host = ${?TUF_REPOSERVER_HOST}
  port = ${?TUF_REPOSERVER_PORT}
  path = "/api/v1/user_repo/targets"
  path = ${?TUF_REPOSERVER_PATH}
  uri = ${tuf.binary.scheme}"://"${tuf.binary.host}":"${tuf.binary.port}${tuf.binary.path}
}

core = {
  host = "localhost"
  host = ${?SOTA_CORE_HOST}
  port = 8080
  port = ${?SOTA_CORE_PORT}
  uri = "http://"${core.host}":"${core.port}
}

server = {
  host = "0.0.0.0"
  host = ${?BIND_HOST}
  port = 8084
  port = ${?BIND_PORT}
}

packages {
  versionFormat = ".+"
}

messaging {
  mode = "kafka"
  kafka {
    groupIdPrefix = "director"
    groupIdPrefix = ${?KAFKA_GROUP_ID}
    topicSuffix = "dev"
    topicSuffix = ${?KAFKA_TOPIC_SUFFIX}
    host = "localhost:9092"
    host = ${?KAFKA_HOST}
  }
}
